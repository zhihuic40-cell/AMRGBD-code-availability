# Citrobacter spp.
Local_citATT <- apc_web_data_ass_cit_output[["LocalDrifts"]] %>% as.data.frame()
Net_citATT <- apc_web_data_ass_cit_output[["NetDrift"]] %>% as.data.frame()
# Enterobacter spp.
Local_entATT <- apc_web_data_ass_ent_output[["LocalDrifts"]] %>% as.data.frame()
Net_entATT <- apc_web_data_ass_ent_output[["NetDrift"]] %>% as.data.frame()
# Escherichia coli
Local_ecoATT <- apc_web_data_ass_eco_output[["LocalDrifts"]] %>% as.data.frame()
Net_ecoATT <- apc_web_data_ass_eco_output[["NetDrift"]] %>% as.data.frame()
# Klebsiella pneumoniae
Local_kpnATT <- apc_web_data_ass_kpn_output[["LocalDrifts"]] %>% as.data.frame()
Net_kpnATT <- apc_web_data_ass_kpn_output[["NetDrift"]] %>% as.data.frame()
# Pseudomonas aeruginosa
Local_paeATT <- apc_web_data_ass_pae_output[["LocalDrifts"]] %>% as.data.frame()
Net_paeATT <- apc_web_data_ass_pae_output[["NetDrift"]] %>% as.data.frame()
# Serratia spp.
Local_serATT <- apc_web_data_ass_ser_output[["LocalDrifts"]] %>% as.data.frame()
Net_serATT <- apc_web_data_ass_ser_output[["NetDrift"]] %>% as.data.frame()
# ==== 定义病原体列表 ====
# 使用完整的学名，包括数据映射
pathogens <- list(
list(name = "Acinetobacter baumannii", data = Local_abaATT),
list(name = "Citrobacter spp.", data = Local_citATT),
list(name = "Enterobacter spp.", data = Local_entATT),
list(name = "Escherichia coli", data = Local_ecoATT),
list(name = "Klebsiella pneumoniae", data = Local_kpnATT),
list(name = "Pseudomonas aeruginosa", data = Local_paeATT),
list(name = "Serratia spp.", data = Local_serATT),
)
# 加载必要的包
library(ggplot2)  # 用于创建图形
library(dplyr)    # 用于数据处理
# ==== 数据加载和处理 ====
# 为每个病原体加载LocalDrifts和NetDrift数据
# Acinetobacter baumannii
Local_abaATT <- apc_web_data_ass_aba_output[["LocalDrifts"]] %>% as.data.frame()
Net_abaATT <- apc_web_data_ass_aba_output[["NetDrift"]] %>% as.data.frame()
# Citrobacter spp.
Local_citATT <- apc_web_data_ass_cit_output[["LocalDrifts"]] %>% as.data.frame()
Net_citATT <- apc_web_data_ass_cit_output[["NetDrift"]] %>% as.data.frame()
# Enterobacter spp.
Local_entATT <- apc_web_data_ass_ent_output[["LocalDrifts"]] %>% as.data.frame()
Net_entATT <- apc_web_data_ass_ent_output[["NetDrift"]] %>% as.data.frame()
# Escherichia coli
Local_ecoATT <- apc_web_data_ass_eco_output[["LocalDrifts"]] %>% as.data.frame()
Net_ecoATT <- apc_web_data_ass_eco_output[["NetDrift"]] %>% as.data.frame()
# Klebsiella pneumoniae
Local_kpnATT <- apc_web_data_ass_kpn_output[["LocalDrifts"]] %>% as.data.frame()
Net_kpnATT <- apc_web_data_ass_kpn_output[["NetDrift"]] %>% as.data.frame()
# Pseudomonas aeruginosa
Local_paeATT <- apc_web_data_ass_pae_output[["LocalDrifts"]] %>% as.data.frame()
Net_paeATT <- apc_web_data_ass_pae_output[["NetDrift"]] %>% as.data.frame()
# Serratia spp.
Local_serATT <- apc_web_data_ass_ser_output[["LocalDrifts"]] %>% as.data.frame()
Net_serATT <- apc_web_data_ass_ser_output[["NetDrift"]] %>% as.data.frame()
# ==== 定义病原体列表 ====
# 使用完整的学名，包括数据映射
pathogens <- list(
list(name = "Acinetobacter baumannii", data = Local_abaATT),
list(name = "Citrobacter spp.", data = Local_citATT),
list(name = "Enterobacter spp.", data = Local_entATT),
list(name = "Escherichia coli", data = Local_ecoATT),
list(name = "Klebsiella pneumoniae", data = Local_kpnATT),
list(name = "Pseudomonas aeruginosa", data = Local_paeATT),
list(name = "Serratia spp.", data = Local_serATT)
)
# ==== 设置可视化参数 ====
# 定义Lancet风格的颜色方案
lancet_colors <- "#ED0000"  # 使用红色表示Attributable数据
# 定义通用主题设置
# 定义通用主题设置
common_theme <- theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(3, "pt"),
legend.position = "none"
)
# ==== 创建绘图函数 ====
create_plot <- function(data, title) {
ggplot(data=data, aes(x=Age, y=`Percent per Year`)) +
# 添加参考线
geom_hline(yintercept = 0, linetype = "dashed", color = "grey50") +
geom_vline(xintercept = 20, linetype = "dashed", color = "grey50") +
# 添加置信区间带
geom_ribbon(aes(ymin=CILo, ymax=CIHi), alpha=0.05, fill=lancet_colors) +
# 添加线条和点
geom_line(size=1, color=lancet_colors) +
geom_point(size=2, color=lancet_colors) +
# 设置坐标轴
scale_y_continuous(breaks = seq(-6, 6, by = 2)) +
coord_cartesian(ylim = c(-6, 6)) +
# 添加标签
ylab("Annual change of mortality (% per year)") +
xlab("Age (years)") +
ggtitle(title) +
common_theme
}
# ==== 创建和保存图形 ====
# 为每个病原体创建图形
for (i in 1:length(pathogens)) {
# 创建图形
p <- create_plot(pathogens[[i]]$data, pathogens[[i]]$name)
# 创建干净的文件名（移除特殊字符）
clean_name <- gsub(" ", "", pathogens[[i]]$name)
clean_name <- gsub("\\.", "", clean_name)
filename <- paste0("PMONE", i, clean_name, ".pdf")
# 保存图形（标准尺寸）
ggsave(filename, p, width = 10.22, height = 6.81)
# 在环境中保存图形对象以供显示
assign(paste0("PMONE", i, clean_name), p)
}
# ==== 显示所有图形 ====
# 按顺序显示每个病原体的图形
PMONE1Acinetobacterbaumannii
PMONE2Citrobacterspp
PMONE3Enterobacterspp
PMONE4Escherichiacoli
PMONE5Klebsiellapneumoniae
PMONE6Pseudomonasaeruginosa
PMONE7Serratiaspp
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
long_age_aba_att <- apc_web_data_ass_aba_output[["LongAge"]] %>% as.data.frame()
long_age_cit_att <- apc_web_data_ass_cit_output[["LongAge"]] %>% as.data.frame()
long_age_ent_att <- apc_web_data_ass_ent_output[["LongAge"]] %>% as.data.frame()
long_age_eco_att <- apc_web_data_ass_eco_output[["LongAge"]] %>% as.data.frame()
long_age_kpn_att <- apc_web_data_ass_kpn_output[["LongAge"]] %>% as.data.frame()
long_age_pae_att <- apc_web_data_ass_pae_output[["LongAge"]] %>% as.data.frame()
long_age_ser_att <- apc_web_data_ass_ser_output[["LongAge"]] %>% as.data.frame()
# 计算数据范围的函数
get_data_range <- function(data) {
min_val <- min(data$CILo, na.rm = TRUE)
max_val <- max(data$CIHi, na.rm = TRUE)
return(c(min_val, max_val))
}
# 计算所有病原体的整体范围
all_data_ranges <- list(
get_data_range(long_age_aba_att),
get_data_range(long_age_cit_att),
get_data_range(long_age_ent_att),
get_data_range(long_age_eco_att),
get_data_range(long_age_kpn_att),
get_data_range(long_age_pae_att),
get_data_range(long_age_ser_att),
get_data_range(long_age_spn_att)
)
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
long_age_aba_att <- apc_web_data_ass_aba_output[["LongAge"]] %>% as.data.frame()
long_age_cit_att <- apc_web_data_ass_cit_output[["LongAge"]] %>% as.data.frame()
long_age_ent_att <- apc_web_data_ass_ent_output[["LongAge"]] %>% as.data.frame()
long_age_eco_att <- apc_web_data_ass_eco_output[["LongAge"]] %>% as.data.frame()
long_age_kpn_att <- apc_web_data_ass_kpn_output[["LongAge"]] %>% as.data.frame()
long_age_pae_att <- apc_web_data_ass_pae_output[["LongAge"]] %>% as.data.frame()
long_age_ser_att <- apc_web_data_ass_ser_output[["LongAge"]] %>% as.data.frame()
# 计算数据范围的函数
get_data_range <- function(data) {
min_val <- min(data$CILo, na.rm = TRUE)
max_val <- max(data$CIHi, na.rm = TRUE)
return(c(min_val, max_val))
}
# 计算所有病原体的整体范围
all_data_ranges <- list(
get_data_range(long_age_aba_att),
get_data_range(long_age_cit_att),
get_data_range(long_age_ent_att),
get_data_range(long_age_eco_att),
get_data_range(long_age_kpn_att),
get_data_range(long_age_pae_att),
get_data_range(long_age_ser_att)
)
# 计算整体的最小值和最大值
overall_min <- floor(min(sapply(all_data_ranges, function(x) x[1])) / 25) * 25  # 改为25的倍数
overall_max <- ceiling(max(sapply(all_data_ranges, function(x) x[2])) / 25) * 25  # 改为25的倍数
# 计算合适的刻度间隔
range_size <- overall_max - overall_min
n_breaks <- 12  # 增加到12个刻度
interval <- ceiling(range_size / n_breaks / 25) * 25  # 使用25的倍数作为间隔
y_breaks <- seq(overall_min, overall_max, by = interval)
# 如果间隔仍然太大，可以进一步调整
if(length(y_breaks) < 10) {  # 如果刻度数太少
interval <- ceiling(range_size / 15 / 10) * 10  # 使用10的倍数重新计算
y_breaks <- seq(overall_min, overall_max, by = interval)
}
# 定义所有病原体及其数据的映射
pathogens <- list(
list(name = "Acinetobacter baumannii", data = long_age_aba_att),
list(name = "Citrobacter spp.", data = long_age_cit_att),
list(name = "Enterobacter spp.", data = long_age_ent_att),
list(name = "Escherichia coli", data = long_age_eco_att),
list(name = "Klebsiella pneumoniae", data = long_age_kpn_att),
list(name = "Pseudomonas aeruginosa", data = long_age_pae_att),
list(name = "Serratia spp.", data = long_age_ser_att)
)
# 定义Lancet风格的颜色
lancet_colors <- "#ED0000"  # 使用红色
# 定义通用主题
# 定义通用主题设置
common_theme <- theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(3, "pt"),
legend.position = "none"
)
# 创建绘图函数
create_plot <- function(data, title) {
ggplot(data=data, aes(x=Age, y=Rate)) +
geom_ribbon(aes(ymin=CILo, ymax=CIHi), alpha=0.05, fill=lancet_colors) +
geom_line(size=0.8, color=lancet_colors) +
geom_point(size=2, color=lancet_colors) +
scale_x_continuous(breaks = seq(0, 100, by = 20)) +
scale_y_continuous(limits = c(overall_min, overall_max),
breaks = y_breaks) +
labs(title = title,
x = "Age (years)",
y = "Mortality rate (per 100,000 population)") +
common_theme
}
# 为每个病原体创建和保存图形
for (i in 1:length(pathogens)) {
# 创建图形
p <- create_plot(pathogens[[i]]$data, pathogens[[i]]$name)
# 创建干净的文件名（移除特殊字符）
clean_name <- gsub(" ", "", pathogens[[i]]$name)
clean_name <- gsub("\\.", "", clean_name)
filename <- paste0("PMTWO", i, clean_name, ".pdf")
# 保存图形
ggsave(filename, p, width = 10.22, height = 6.81)
# 在环境中保存图形对象
assign(paste0("PMTWO", i, clean_name), p)
}
# 显示所有图形
PMTWO1Acinetobacterbaumannii
PMTWO2Citrobacterspp
PMTWO3Enterobacterspp
PMTWO4Escherichiacoli
PMTWO5Klebsiellapneumoniae
PMTWO6Pseudomonasaeruginosa
PMTWO7Serratiaspp
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
period_rr_aba_att <- apc_web_data_att_aba_output[["PeriodRR"]] %>% as.data.frame()
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
period_rr_aba_att <- apc_web_data_ass_aba_output[["PeriodRR"]] %>% as.data.frame()
period_rr_cit_att <- apc_web_data_ass_cit_output[["PeriodRR"]] %>% as.data.frame()
period_rr_ent_att <- apc_web_data_ass_ent_output[["PeriodRR"]] %>% as.data.frame()
period_rr_eco_att <- apc_web_data_ass_eco_output[["PeriodRR"]] %>% as.data.frame()
period_rr_kpn_att <- apc_web_data_ass_kpn_output[["PeriodRR"]] %>% as.data.frame()
period_rr_pae_att <- apc_web_data_ass_pae_output[["PeriodRR"]] %>% as.data.frame()
period_rr_ser_att <- apc_web_data_ass_ser_output[["PeriodRR"]] %>% as.data.frame()
# 计算数据范围的函数
get_data_range <- function(data) {
min_val <- min(data$CILo, na.rm = TRUE)
max_val <- max(data$CIHi, na.rm = TRUE)
return(c(min_val, max_val))
}
# 计算所有病原体的整体范围
all_data_ranges <- list(
get_data_range(period_rr_aba_att),
get_data_range(period_rr_cit_att),
get_data_range(period_rr_ent_att),
get_data_range(period_rr_eco_att),
get_data_range(period_rr_kpn_att),
get_data_range(period_rr_pae_att),
get_data_range(period_rr_ser_att)
)
# 计算整体的最小值和最大值
y_min <- floor(min(sapply(all_data_ranges, function(x) x[1])) * 10) / 10
y_max <- ceiling(max(sapply(all_data_ranges, function(x) x[2])) * 10) / 10
# 定义所有病原体及其数据的映射
pathogens <- list(
list(name = "Acinetobacter baumannii", data = period_rr_aba_att),
list(name = "Citrobacter spp.", data = period_rr_cit_att),
list(name = "Enterobacter spp.", data = period_rr_ent_att),
list(name = "Escherichia coli", data = period_rr_eco_att),
list(name = "Klebsiella pneumoniae", data = period_rr_kpn_att),
list(name = "Pseudomonas aeruginosa", data = period_rr_pae_att),
list(name = "Serratia spp.", data = period_rr_ser_att)
)
# 定义Lancet风格的颜色
lancet_colors <- "#ED0000"  # 使用红色
# 定义通用主题
# 定义通用主题设置
common_theme <- theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(3, "pt"),
legend.position = "none"
)
# 创建绘图函数
create_plot <- function(data, title) {
# 找到Rate Ratio = 1的点
reference_point <- data[which.min(abs(data$`Rate Ratio` - 1)), "Period"]
ggplot(data=data, aes(x=Period, y=`Rate Ratio`)) +
# 添加参考线
geom_hline(yintercept = 1, linetype = "dashed", color = "black", size = 0.5) +
geom_vline(xintercept = reference_point, linetype = "dashed", color = "black", size = 0.5) +
# 添加数据图层
geom_ribbon(aes(ymin=CILo, ymax=CIHi), alpha=0.05, fill=lancet_colors) +
geom_line(size=0.9, color=lancet_colors) +
geom_point(size=1.8, color=lancet_colors) +
# 设置坐标轴范围和刻度
scale_x_continuous(limits = c(1990, 2020),
breaks = seq(1990, 2020, by = 5)) +
scale_y_continuous(limits = c(y_min, y_max)) +
# 添加标签
labs(title = title,
x = "Calendar Year",
y = "Rate Ratio") +
common_theme
}
# 为每个病原体创建和保存图形
for (i in 1:length(pathogens)) {
# 创建图形
p <- create_plot(pathogens[[i]]$data, pathogens[[i]]$name)
# 创建干净的文件名（移除特殊字符）
clean_name <- gsub(" ", "", pathogens[[i]]$name)
clean_name <- gsub("\\.", "", clean_name)
filename <- paste0("PMTHREE", i, clean_name, ".pdf")
# 保存图形
ggsave(filename, p, width = 10.22, height = 6.81)
# 在环境中保存图形对象
assign(paste0("PMTHREE", i, clean_name), p)
}
# 显示所有图形
PMTHREE1Acinetobacterbaumannii
PMTHREE2Citrobacterspp
PMTHREE3Enterobacterspp
PMTHREE4Escherichiacoli
PMTHREE5Klebsiellapneumoniae
PMTHREE6Pseudomonasaeruginosa
PMTHREE7Serratiaspp
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
cohort_rr_aba_att <- apc_web_data_ass_aba_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_cit_att <- apc_web_data_ass_cit_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ent_att <- apc_web_data_att_ent_output[["CohortRR"]] %>% as.data.frame()
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
cohort_rr_aba_att <- apc_web_data_ass_aba_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_cit_att <- apc_web_data_ass_cit_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ent_att <- apc_web_data_ass_ent_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_eco_att <- apc_web_data_ass_eco_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_kpn_att <- apc_web_data_ass_kpn_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_pae_att <- apc_web_data_ass_pae_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ser_att <- apc_web_data_ass_ser_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_spn_att <- apc_web_data_ass_spn_output[["CohortRR"]] %>% as.data.frame()
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
cohort_rr_aba_att <- apc_web_data_ass_aba_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_cit_att <- apc_web_data_ass_cit_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ent_att <- apc_web_data_ass_ent_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_eco_att <- apc_web_data_ass_eco_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_kpn_att <- apc_web_data_ass_kpn_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_pae_att <- apc_web_data_ass_pae_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ser_att <- apc_web_data_ass_ser_output[["CohortRR"]] %>% as.data.frame()
# 计算数据范围的函数
get_data_range <- function(data) {
min_val <- min(data$CILo, na.rm = TRUE)
max_val <- max(data$CIHi, na.rm = TRUE)
return(c(min_val, max_val))
}
# 计算所有病原体的整体范围
all_data_ranges <- list(
get_data_range(cohort_rr_aba_att),
get_data_range(cohort_rr_cit_att),
get_data_range(cohort_rr_ent_att),
get_data_range(cohort_rr_eco_att),
get_data_range(cohort_rr_kpn_att),
get_data_range(cohort_rr_pae_att),
get_data_range(cohort_rr_ser_att),
)
# 加载必要的包
library(ggplot2)
library(dplyr)
# 生成每个病原体的数据
cohort_rr_aba_att <- apc_web_data_ass_aba_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_cit_att <- apc_web_data_ass_cit_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ent_att <- apc_web_data_ass_ent_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_eco_att <- apc_web_data_ass_eco_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_kpn_att <- apc_web_data_ass_kpn_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_pae_att <- apc_web_data_ass_pae_output[["CohortRR"]] %>% as.data.frame()
cohort_rr_ser_att <- apc_web_data_ass_ser_output[["CohortRR"]] %>% as.data.frame()
# 计算数据范围的函数
get_data_range <- function(data) {
min_val <- min(data$CILo, na.rm = TRUE)
max_val <- max(data$CIHi, na.rm = TRUE)
return(c(min_val, max_val))
}
# 计算所有病原体的整体范围
all_data_ranges <- list(
get_data_range(cohort_rr_aba_att),
get_data_range(cohort_rr_cit_att),
get_data_range(cohort_rr_ent_att),
get_data_range(cohort_rr_eco_att),
get_data_range(cohort_rr_kpn_att),
get_data_range(cohort_rr_pae_att),
get_data_range(cohort_rr_ser_att)
)
# 计算整体的最小值和最大值，并调整为整数
y_min <- floor(min(sapply(all_data_ranges, function(x) x[1])))
y_max <- ceiling(max(sapply(all_data_ranges, function(x) x[2])))
# 定义所有病原体及其数据的映射
pathogens <- list(
list(name = "Acinetobacter baumannii", data = cohort_rr_aba_att),
list(name = "Citrobacter spp.", data = cohort_rr_cit_att),
list(name = "Enterobacter spp.", data = cohort_rr_ent_att),
list(name = "Escherichia coli", data = cohort_rr_eco_att),
list(name = "Klebsiella pneumoniae", data = cohort_rr_kpn_att),
list(name = "Pseudomonas aeruginosa", data = cohort_rr_pae_att),
list(name = "Serratia spp.", data = cohort_rr_ser_att)
)
# 定义Lancet风格的颜色
lancet_colors <- "#ED0000"  # 使用红色
# 定义通用主题设置
common_theme <- theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 12, face = "bold", color = "black"),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
axis.ticks = element_line(color = "black", size = 0.5),
axis.ticks.length = unit(3, "pt"),
legend.position = "none"
)
# 创建绘图函数
create_plot <- function(data, title) {
# 找到Rate Ratio = 1的点
reference_point <- data[which.min(abs(data$`Rate Ratio` - 1)), "Cohort"]
ggplot(data=data, aes(x=Cohort, y=`Rate Ratio`)) +
# 添加参考线
geom_hline(yintercept = 1, linetype = "dashed", color = "black", size = 0.5) +
geom_vline(xintercept = reference_point, linetype = "dashed", color = "black", size = 0.5) +
# 添加数据图层
geom_ribbon(aes(ymin=CILo, ymax=CIHi), alpha=0.05, fill=lancet_colors) +
geom_line(size=0.8, color=lancet_colors) +
geom_point(size=2, color=lancet_colors) +
# 设置坐标轴范围和刻度
scale_x_continuous(limits = c(1900, 2020),
breaks = seq(1900, 2020, by = 20)) +
scale_y_continuous(limits = c(y_min, y_max),
breaks = seq(y_min, y_max, by = 1)) +  # 设置y轴刻度间距为1
# 添加标签
labs(title = title,
x = "Birth Cohort",
y = "Rate Ratio") +
common_theme
}
# 为每个病原体创建和保存图形
for (i in 1:length(pathogens)) {
# 创建图形
p <- create_plot(pathogens[[i]]$data, pathogens[[i]]$name)
# 创建干净的文件名（移除特殊字符）
clean_name <- gsub(" ", "", pathogens[[i]]$name)
clean_name <- gsub("\\.", "", clean_name)
filename <- paste0("PMFOUR", i, clean_name, ".pdf")
# 保存图形
ggsave(filename, p, width = 10.22, height = 6.81)
# 在环境中保存图形对象
assign(paste0("PMFOUR", i, clean_name), p)
}
# 显示所有图形
PMFOUR1Acinetobacterbaumannii
PMFOUR2Citrobacterspp
PMFOUR3Enterobacterspp
PMFOUR4Escherichiacoli
PMFOUR5Klebsiellapneumoniae
PMFOUR6Pseudomonasaeruginosa
PMFOUR7Serratiaspp
